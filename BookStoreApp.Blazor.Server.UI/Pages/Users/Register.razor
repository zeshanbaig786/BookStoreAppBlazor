@page "/users/register"
@inject IClient HttpClient
@inject NavigationManager NavManager
<h3>Register New Account</h3>
@if (string.IsNullOrEmpty(message) == false)
{
	<div class="alert alert-danger">
		<p>@message</p>
	</div>
}
<div class="card-body">
	<EditForm Model="RegistrationModel"
			  
	          OnValidSubmit="HandleRegistration">
		<DataAnnotationsValidator/>
		<ValidationSummary/>
		<div class="form-group">
			<label for="email">
				Email Address
			</label>
			<InputText class="form-control" @bind-Value="RegistrationModel.Email"/>

			<ValidationMessage For="@(() => RegistrationModel.Email)"/>
		</div>
		<div class="form-group">
			<label for="FirstName">
				First Name
			</label>
			<InputText class="form-control" @bind-Value="RegistrationModel.FirstName"/>

			<ValidationMessage For="@(() => RegistrationModel.FirstName)"/>
		</div>
		<div class="form-group">
			<label for="LastName">
				Last Name
			</label>
			<InputText class="form-control" @bind-Value="RegistrationModel.LastName" />

			<ValidationMessage For="@(() => RegistrationModel.LastName)" />
		</div>
		<div class="form-group">
			<label for="Password">
				Password
			</label>
			<InputText type="password" class="form-control" @bind-Value="RegistrationModel.Password" />

			<ValidationMessage For="@(() => RegistrationModel.Password)" />
		</div>
		<button type="submit" class="btn btn-primary">Register</button>
	</EditForm>
</div>

@code {
	UserDto RegistrationModel = new()
	{
		Role = "User"
	};
	string message = string.Empty;
	private async Task HandleRegistration()
	{
		RegistrationModel.Role = "User";
		try
		{
			await HttpClient.RegisterAsync(RegistrationModel);
			NavigateToLogin();
		}
		catch (ApiException ex)
		{
			if (ex.StatusCode is >= 200 and <= 299)
			{
				NavigateToLogin();
			}
			message = ex.Response;
		}
	}

	private void NavigateToLogin()
	{
		NavManager.NavigateTo("/users/login");
	}


}
